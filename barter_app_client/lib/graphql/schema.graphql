type Message {
    id: Int!
    user: String!
    content: String!
}

type Favorites {
    id: ID!
    user_id: ID!
    product_id: ID!
}

scalar Upload

type File {
    id: Int!
    name: String!
    content: String!
    contentType: String!
}

input UploadFile {
    id: Int!
    file: Upload!
}

type Mutation {
    Register(input: CreateUserInput): AuthResponse!
    Login(input: LoginInput): AuthResponse!
    CreateProduct(input: CreateProductInput): Product! @auth
    Like(product_id: ID!): String! @auth
    Unlike(product_id: ID!): Boolean! @auth
    CreateTransaction(input: TransactionCreateInput): ID! @auth
    TransactionUpdateOngoing(transaction_id: ID!): Boolean! @auth
    TransactionUpdateDeclined(transaction_id: ID!): Boolean! @auth
    TransactionUpdateDone(transaction_id: ID!): Boolean! @auth
    postMessage(user: String!, content: String!): Int! @auth
    singleUpload(file: Upload!): String! @auth
    editProduct(input: EditProductInput!): Boolean! @auth
    deleteProduct(id: ID!): Boolean! @auth
    editProfile(input: EditProfileInput!): Boolean! @auth
}

type Product {
    id: ID!
    category: ProductCategory!
    name: String!
    description: String!
    image: String!
    status: ProductStatus!
    createdBy: User!
    createdAt: DateTime!
}

input CreateProductInput {
    category: ProductCategory!
    name: String!
    description: String!
    image: Upload!
}

enum ProductCategory {
    DEFAULT
    HOME
    CLOTHES
    CHILDREN
    SPORT
    OTHER
}

enum ProductStatus {
    AVAILABLE
    EXCHANGING
    EXCHANGED
}

input EditProductInput {
    id: ID!
    category: ProductCategory!
    name: String!
    description: String!
    image: Upload
}

enum ProductSort {
    DEFAULT
    DATE
    DISTANCE
}

type Query {
    Products(category: ProductCategory!=DEFAULT, search: String!="", sort: ProductSort!=DEFAULT, first: Int!=10, start: Int!=0): [Product!] @auth
    User: User! @auth
    Product(id: ID!): Product! @auth
    Categories: [ProductCategory] @auth
    TransactionsByOwner: [Transaction!] @auth
    TransactionByBuyer: [Transaction!] @auth
    GetByUserAvailableProducts: [Product!] @auth
    GetByCategoryAvailable(category: ProductCategory): [Product!] @auth
    GetOngoing: [Transaction!] @auth
    GetCreated: [Transaction!] @auth
    GetArchive: [Transaction!] @auth
    messages: [Message!] @auth
    getLikes: [Favorites!] @auth
    getFavoritesProducts: [Product!] @auth
}

scalar DateTime
directive @auth on FIELD_DEFINITION

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Subscription {
    messages: [Message!]
}

type Transaction {
    id: ID!
    owner: ID!
    buyer: ID!
    product_id_owner: ID!
    product_id_buyer: ID!
    created_at: DateTime!
    shipping: TransactionShipping!
    address: String!
    status: TransactionStatus!
}

enum TransactionShipping {
    MEETUP
    MAIL
    COURIER
}

enum TransactionStatus {
    CREATED
    ONGOING
    DONE
    DECLINED
}

input TransactionCreateInput {
    owner: ID!
    product_id_owner: ID!
    product_id_buyer: ID!
    shipping: TransactionShipping!
    address: String!
}

input ChangeStatusInput {
    id: ID!
    status: TransactionStatus!
}

type AuthToken {
    accessToken: String!
    expiredAt: DateTime!
}

type AuthResponse {
    authToken: AuthToken!
    user: User!
}

type AuthPayload {
    user: User!
    token: String!
}

input LoginInput {
    password: String!
    email: String!
}

input CreateUserInput {
    name: String!
    email: String!
    phone: String!
    password: String!
    city: String!
    mode: UserMode!
}


type User {
    id: ID!
    name: String!
    password: String!
    email: String!
    phone: String!
    city: String!
    mode: UserMode!
    postedProducts: [Product!]!
}


enum UserMode {
    CLIENT
    ADMIN
}

input EditProfileInput {
    name: String!
    email: String!
    phone: String!
    city: String!
}